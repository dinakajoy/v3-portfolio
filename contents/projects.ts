import { IProject } from "@/interfaces/types";

export const projects: IProject[] = [
  {
    title: "Face Detection App",
    description:
      "This is a project that accepts image links and marks detected face areas using Clarifai's face-detection model. It offers essential features like user registration and login, powered by an Express.js backend and an intuitive React.js frontend.",
    features: [
      "User Authentication: Register, login, and maintain user sessions securely",
      "Face Detection: Automatically detects and highlights faces in an image provided via link",
      "Count: Counts users submitted images and displays the number of faces detected",
      "API Integration: Seamless consumption of Clarifai's Face Detection API",
      "Responsive Frontend: Built with React.js for a smooth, dynamic user experience",
      "Backend Services: Built with Express.js and handles authentication, user management, and API logic",
    ],
    reasons: [
      "API Consumption: Learn how to integrate third-party AI services into web applications",
      "Full-Stack Skills: Practice building a complete web app with React frontend and Express backend",
      "Authentication Practice: Implement secure user login, registration, and session handling",
      "Image Processing: Understand how to handle external media and render dynamic visual feedback",
      "State Management: Manage user inputs, API responses, and UI updates effectively",
      "User Experience: Design intuitive interfaces that provide clear visual feedback to users",
    ],
    techStack: ["TypeScript", "TailwindCSS", "React.js", "Express.js", "MogoDB", "Clarifai API"],
    link: "https://github.com/dinakajoy/face-detection-app",
    liveLink: "https://face-detection-app-by-joy.vercel.app",
  },
  {
    title: "AI-Powered Job Application Assistant",
    description:
      "A web application that helps users optimize their job applications with AI-generated insights.",
    features: [
      "Resume Analysis: Upload documents and get AI feedback on strengths and areas for improvement",
      "Cover Letter Generation: Create tailored cover letters based on job descriptions",
      "Skill Matching: Analyze job descriptions and match them with user skills",
      "Job Description Parsing: Extract key information from job postings for better understanding",
      "File Upload: Securely upload and parse user documents (PDF, DOCX)",
    ],
    reasons: [
      "AI-Powered Features: Integrate OpenAI API for intelligent resume analysis and cover letter generation",
      "User-Centric Design: Focus on user experience with a clean and intuitive interface",
      "Real-World User Problems: Solve a genuine need for better job application support and preparation",
      "File Handling Skills: Work with uploading, parsing, and analyzing user files securely",
      "Full-Stack Development: Combine frontend UX design with backend AI integration and database management",
      "Portfolio Value: Create a high-impact project that demonstrates both technical skill and user centered design thinking",
    ],
    techStack: ["Next.js", "TypeScript", "TailwindCSS", "Express.js", "OpenAI API"],
    link: "https://github.com/dinakajoy/job-application-assistant",
    liveLink: "https://job-application-assistant.vercel.app",
  },
  {
    title: "Team Collab GraphQL API",
    description:
      "TeamCollab is a production-ready GraphQL API for team collaboration and task management, built with a scalable architecture and modern backend best practices",
    features: [
      "Authentication & Authorization: Secure login and role-based access using GraphQL Shield",
      "Project Management: Create, update, assign, and track projects within teams",
      "Task Management: Manage tasks with assignment, status updates, and deadlines",
      "Team Structures: Organize users into scalable teams and projects",
      "Data Batching: Optimize database calls with DataLoader for performance",
      "Performance Monitoring: Implemented Prometheus metrics to track API health and performance",
      "Error Handling: Structured error responses for consistent client-side handling",
    ],
    reasons: [
      "Advanced GraphQL Skills: Practice building a professional-grade GraphQL API with Apollo Server and GraphQL Shield",
      "Data Optimization: Learn to batch and cache data efficiently using DataLoader",
      "Scalable Architecture: Understand how to structure scalable APIs for real-world collaborative platforms",
      "Monitoring and Observability: Integrate Prometheus to track performance and API health",
      "Security Best Practices: Enforce strict authorization and permissions control with GraphQL middleware",
      "CI/CD Familiarity: Strengthen project setup with proper TypeScript, environment management, and development standards",
    ],
    techStack: ["Node.js", "Express.js", "MongoDB", "Apollo Server"],
    link: "https://github.com/dinakajoy/teamcollab-graphQL-API",
  },
  {
    title: "Team Work REST API",
    description:
      "Teamwork is an internal social network API built to foster collaboration, connection, and communication among employees of an organization. It supports article posting, GIF sharing, commenting, flagging inappropriate content, and administrative controls.",
    features: [
      "User Authentication: Secure login, account creation, and profile management",
      "Admin Authorization: Manage employees, categories, and moderate flagged content",
      "Content Management: Create, edit, delete, and comment on articles and GIFs",
      "Content Moderation: Flag and review inappropriate articles, GIFs, and comments",
      "Category Management: Group articles under specific categories",
      "Swagger Documentation: Fully documented API endpoints for easy integration",
      "CI/CD Pipeline: Automated testing and deployment setup using Travis CI",
      "Cloudinary Integration: Upload and manage images and GIFs",
      "Unit Testing: Extensive test coverage using Mocha, Chai, and Coveralls",
      "PostgreSQL Database: Efficient and scalable data storage using 'pg' driver",
      "Code Quality Monitoring: Maintain code standards and health using Code Climate",
      "Role-based Access Control (RBAC): Enforce different permissions for users and admins",
    ],
    reasons: [
      "Backend Architecture: Learn how to structure a full-fledged, modular RESTful API",
      "Authentication and Authorization: Practice implementing secure access control using role-based permissions",
      "Continuous Integration: Set up automated testing, build, and deployment workflows",
      "API Documentation: Create professional, developer-friendly API references using Swagger",
      "Database Management: Design normalized relational schemas and manage them with PostgreSQL",
      "Testing Best Practices: Write comprehensive unit and integration tests for all endpoints",
      "Cloud Storage: Integrate third-party services (Cloudinary) for media management",
      "Error Handling: Implement graceful and consistent API error responses",
      "Scalability: Build foundations for scalable APIs with maintainable code structures",
      "Code Quality: Maintain clean, tested, and production-ready codebases",
    ],
    techStack: ["Node.js", "Express.js", "PostgreSQL", "Swagger API"],
    link: "https://github.com/dinakajoy/teamwork-REST-API",
  },
  {
    title: "JSON Engine",
    description:
      "A lightweight tool for parsing, manipulating, and formatting JSON data efficiently.",
    features: [
      "Parse and read JSON files with ease",
      "Convert JSON data into JavaScript objects",
      "Transform JSON into CSV format for easier analysis",
      "Full-Text Search: Search and filter JSON data quickly",
      "Efficient Streaming: Handle large JSON files without memory overload",
      "Advanced Query Engine: Use Worker threads to perform operations like =, contains, endsWith, and startsWith",
      "Background Processing: Leverage multi-threading to keep the UI responsive during heavy queries",
    ],
    reasons: [
      "Data Parsing Skills: Practice parsing and converting structured data between formats like JSON and CSV",
      "Performance Optimization: Learn how to stream large files efficiently without blocking the main thread",
      "Multi-threading: Gain hands-on experience using Worker threads for offloading expensive computations",
      "Search Algorithms: Implement full-text search and filtering across large JSON datasets",
      "Data Manipulation: Work on reading, transforming, and exporting JSON data programmatically",
      "Backend Foundations: Build core functionalities often needed in API development and data-intensive applications",
      "User Experience: Ensure a smooth UI experience even when handling heavy data operations in the background",
    ],
    techStack: ["JavaScript", "Node.js", "Worker", "JSONStream"],
    link: "https://github.com/dinakajoy/JSON_Engine",
  },
  {
    title: "Real-time Chat App",
    description:
      "A real-time chat application that allows users to authenticate, add friends, and exchange messages with attachments. The aim of this project is to learn how to build projects on Firebase.",
    features: [
      "User Authentication: Login, Signup, Forgot Password, and Reset Password functionality",
      "Real-Time Messaging: Send and receive messages instantly and attach and share files or images in conversations",
      "Friends Management: Add and manage friends to build your personal chat network",
      "Responsive Design: Fully responsive UI built with SCSS and TailwindCSS for an optimized user experience on all devices",
    ],
    reasons: [
      "Firebase Mastery: Practice integrating Firebase Authentication, Firestore, and Cloud Storage for a full-stack real-time app.",
      "Real-Time Communication: Learn to implement WebSocket-like behavior using Firebaseâ€™s real-time database or Firestore listeners.",
      "Authentication Flow: Understand and implement secure user flows like signup, login, password reset, and email verification.",
      "File Upload & Management: Build a system for uploading, storing, and retrieving images or files in chat using Firebase Storage.",
      "State Management: Handle chat rooms, message threads, and user interactions using React state and hooks effectively.",
      "Accessibility & UX: Focus on accessible design and responsive layout that ensures a pleasant experience across devices.",
      "Deployment Workflow: Practice deploying a modern React + Firebase application using platforms like Vercel.",
      "Security Best Practices: Apply Firebase Rules to restrict access and protect user data."
    ],
    techStack: ["React.js", "TypeScript", "SCSS", "TailwindCSS", "Firebase"],
    link: "https://github.com/dinakajoy/real_time_chat_app",
    liveLink: "https://real-time-chat-app-by-joy.vercel.app",
  },
  {
    title: "SmartTicTac: AI-Enhanced Tic-Tac-Toe",
    description:
      "A web-based Tic-Tac-Toe game that incorporates AI to provide a challenging gameplay experience.",
    features: [
      "AI Opponent: Built-in AI that adjusts difficulty based on user performance",
      "User Interface: Simple and intuitive Tic-Tac-Toe grid with clickable cells",
      "Game Modes: Play against the computer or a second player",
      "Real-Time Feedback: Immediate results after each move with win/loss notification",
      "Difficulty Levels: Three AI difficulty levels (easy, medium, hard)",
      "Time Travel: Navigate through the move history and jump back to any previous state",
      "Responsive Design: Fully optimized for both desktop and mobile devices",
      "Reset Functionality: Option to reset the game and start fresh",
    ],
    reasons: [
      "AI Implementation: Practice building AI decision-making with Minimax or heuristic strategies",
      "Game Logic: Manage turn-based gameplay, win/loss conditions, and draw detection",
      "State Management: Handle dynamic game states, including historical states for time travel using react hooks",
      "User Interaction: Build a smooth, interactive interface that supports real-time move history navigation",
      "Difficulty Adjustment: Implement dynamic difficulty scaling to enhance user engagement",
      "Responsive Design: Ensure a consistent and enjoyable experience across all devices",
      "Performance Optimization: Maintain fast and efficient rendering when jumping across moves",
    ],
    techStack: ["Next.js", "TypeScript", "TailwindCSS", "Minimax Algorithm"],
    link: "https://github.com/dinakajoy/SmartTicTac",
    liveLink: "https://smart-tic-tac.vercel.app",
  },
  {
    title: "Kepler Planet Explorer",
    description:
      "A web application that visualizes exoplanet data from the Kepler space mission, helping users explore discovered planets in an interactive way.",
    features: [
      "CSV Data Parsing: Load and process NASA's Exoplanet API data from a static CSV file",
      "Planet Catalogue: Display a searchable and sortable list of discovered planets",
      "Planet Details: View detailed information about each planet",
      "Data Visualization: Charts and graphs showing key statistics (e.g., planet size distribution)",
      "Filtering and Sorting: Allow users to filter planets by criteria like size, orbital period, and habitability zone",
      "Responsive Design: Ensure optimal viewing and interaction across various device sizes",
      "Error Handling: Manage issues related to data loading and parsing gracefully",
    ],
    reasons: [
      "CSV File Handling: to learn how to load, parse, and process structured CSV data in web applications",
      "Data Visualization: Represent complex scientific data through charts and graphs",
      "Search and Filter Functionality: Implement efficient ways for users to explore large datasets - Paginated Table or Infinite Loaded Grid",
      "State Management: Manage parsed data, applied filters, and selected planet details",
      "UI/UX Design: Create an engaging and informative interface for scientific planets' exploration",
      "Performance Optimization: Optimize loading, parsing, and rendering of large datasets",
    ],
    techStack: ["Next.js", "TypeScript", "TailwindCSS", "NASA Exoplanet API"],
    link: "https://github.com/dinakajoy/Kepler-planet-explorer",
    liveLink: "https://kepler-planet-explorer.vercel.app",
  },
  {
    title: "GitHub Snoop",
    description:
      "A web application that provides insights into GitHub profiles, repositories, and contributions.",
    features: [
      "Guest Access: Users can explore profiles without authentication (search history not preserved)",
      "GitHub Authentication: Users can log in via GitHub OAuth for a personalized experience",
      "Profile Search: Search for GitHub users by username",
      "User Insights: Display user bio, location, followers, following, and public repository count, etc",
      "Repository Listing: List a userâ€™s repositories with stars, forks, and descriptions",
      "Sorting and Filtering: Sort repositories by stars, forks, or creation date",
      "Error Handling: Manage invalid usernames, API rate limits, and loading states",
      "Responsive Design: Optimized layout for desktop and mobile devices",
      "Performance: Search, pagination, lazy loading for data to enhance user experience",
    ],
    reasons: [
      "API Integration: Work with third-party APIs (GitHub API) to fetch and display data",
      "OAuth Authentication: Implement GitHub OAuth to offer secure user login and personalized experience",
      "Data Visualization: Represent user activity and repository insights visually",
      "Search Functionality: Implement efficient and responsive search experiences",
      "State Management: Manage dynamic user, repository, and authentication states",
      "Error Handling: Handle real-world API challenges like rate limits, missing data, and auth errors gracefully",
      "UI/UX Design: Create a clean, intuitive interface for quick information discovery",
      "Performance Optimization: Optimize API calls, loading states, and user interactions",
    ],
    techStack: ["Next.js", "TypeScript", "TailwindCSS", "GitHub API"],
    link: "https://github.com/dinakajoy/github-snoop",
    liveLink: "https://github-snoop.vercel.app",
  },
  {
    title: "Quiz App",
    description:
      " web-based quiz application that allows users to test their knowledge across various topics with real-time scoring and performance feedback",
    features: [
      "Dynamic Questions: Questions fetched from mongoDB database",
      "Real-Time Scoring: Immediate feedback and score updates after submission",
      "Timer Functionality: Countdown timer for each question to add challenge",
      "Result Summary: Displays final score and review of correct vs incorrect answers",
      "Responsive Design: Fully functional across desktop, tablet, and mobile devices",
      "Error Handling: Graceful handling of API errors and loading states",
    ],
    reasons: [
      "State Management: Practiced managing complex dynamic states like current question, selected answers, and real-time scoring",
      "User Interaction: Build a smooth and interactive user experiences through intuitive quiz flows",
      "Data Handling: Work on handling structured question data efficiently",
      "UI/UX Skills: Design a clean and minimalistic interface focused on clarity and ease of use",
    ],
    techStack: ["Next.js", "TypeScript", "CSS", "SWR", "GraphQL API"],
    link: "https://github.com/dinakajoy/quiz_app_graphql_api",
    liveLink: "https://quiz-app-graphql-api.vercel.app",
  },
  {
    title: "Mini Netflix Movie App",
    description:
      "A movie catalogue web application that allows users to browse, search, save and remove favourite moves, and discover movies with a Netflix-like interface.",
    features: [
      "User Authentication: Secure login and registration process",
      "Movie Catalogue: Paginated list of movies with lazy loading",
      "Movie Details: Detailed view of each movie with description, rating, and release date",
      "Favorites: Users can save and remove movies from their favorites list",
      "Search and Sort: Users can search for and sort movies by title",
      "Responsive Design: Optimized for both desktop and mobile devices",
      "Error Handling: Graceful handling of API errors and loading states",
    ],
    reasons: [
      "Authentication: Mimicked Netflix's user authentication flow, showcasing my understanding of secure login processes",
      "Clean UX/UI Skills: Netflix's sleek interface sets the gold standard. Recreating it demonstrates my ability to design intuitive, modern, and responsive interfaces.",
      "API Consumption: Mimicked integrating with external APIs",
      'User Personalization: Adding "favorites" and "saved movies" shows I can handle user-specific data management',
      "Scalability Practice: Learnt important concepts like pagination, lazy loading, sorting, search and performance optimization.",
    ],
    techStack: ["CSS", "TypeScript", "React"],
    link: "https://github.com/dinakajoy/mini-netflix-movie-app",
    liveLink: "https://mini-netflix-movie-app.vercel.app",
  },
  {
    title: "Save the Princess Game",
    description:
      "A fun and interactive game where players navigate through challenges to rescue a princess.",
    features: [
      "Hero Character: A hero character that can move around the screen",
      "Princess Character: A princess character that the hero must rescue",
      "Obstacle: Simple obstacles that the hero must defeat",
      "User Interaction: Allows the user to control the hero character using keyboard events",
      "Win Screen: Displays a win screen when the hero reaches the princess and restarts the game after a win",
    ],
    reasons: [
      "Core Game Development Skills: To show my understanding of game loops, player state management, collision detection, levels, and user interaction",
      "Interactive & Engaging: Itâ€™s fun! Games naturally grab attention, making it a killer portfolio piece that engages recruiters and users instantly",
      "Problem-Solving Practice: Designing obstacles, and puzzles improved my problem-solving skills and creative thinking",
    ],
    techStack: ["React", "CSS"],
    link: "https://github.com/dinakajoy/save-the-princess-game",
    liveLink: "https://save-the-princess.netlify.app",
  },
  {
    title: "Mini Marvel",
    description:
      "A web application that allows users to explore Marvel characters, comics, and stories using the Marvel API.",
    features: [
      "Home Screen: Replicate the Captain Marvelâ€™s Home page with the 'Connections Section' replaced with 'Captain Marvels Comics'",
      "Comics Screen: List all Captain Marvel comic issues screen",
      "Comics Issues Screen: Displays a list of all comic in which Captain Marvel appears",
      "Feature to sort the list (Comics, Comics Issues) by edition release date in ascending or descending order. Also uses Infinite Scroll and LazyLoad for the images",
      "Detail Screen: Displays details of a comic/comics issue when selected from the list",
    ],
    reasons: [
      "API Integration Skills: To showcase my ability to work with external APIs, handle dynamic data, and build interactive UI",
      "Search, Filtering, and Pagination Practice: Handling lots of Marvel characters, comics, and stories means building real search, filter, and lazy loading features like a real-world app",
      "Fun Portfolio Project: Mini Marvel shows off both technical skills and creativity",
    ],
    techStack: ["React", "CSS", "Marvel API"],
    link: "https://github.com/dinakajoy/mini-marvel",
    liveLink: "https://mini-marvel.netlify.app",
  },
];
