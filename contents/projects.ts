import { IProject } from "@/interfaces/types";

export const projects: IProject[] = [
  {
    title: "Face Detection App",
    description:
      "A full-stack web application that detects and highlights faces in submitted image URLs using Clarifai’s Face Detection API. It supports user authentication and tracks submission counts for an engaging, personalized experience.",
    features: [
      "User Authentication: Secure registration and login with session persistence",
      "Face Detection: Automatically identifies and highlights facial regions in submitted images",
      "Submission Tracking: Counts and displays the number of images each user has processed",
      "API Integration: Connects to Clarifai’s Face Detection API to process image data",
      "Responsive UI: Built with React.js and TailwindCSS for a smooth and interactive frontend",
      "Backend Services: Node.js/Express.js handles authentication, image processing logic, and data storage",
    ],
    reasons: [
      "To deepen my understanding of integrating third-party AI APIs into real-world web apps",
      "To sharpen my full-stack skills by managing both frontend interactivity and backend logic",
      "To practice implementing secure user authentication and session control",
      "To explore dynamic image processing and responsive UI updates",
      "To design a user-friendly experience with clear visual feedback",
    ],
    techStack: [
      "TypeScript",
      "TailwindCSS",
      "React.js",
      "Express.js",
      "MogoDB",
      "Clarifai API",
    ],
    link: "https://github.com/dinakajoy/face-detection-app",
    liveLink: "https://face-detection-app-by-joy.vercel.app",
  },
  {
    title: "TheraBot - An AI Therapist Chatbot",
    description:
      "A web-based AI companion designed to offer emotional support and mental wellness guidance through natural, empathetic conversations powered by OpenAI’s GPT-4-turbo. TheraBot emphasizes privacy, emotional intelligence, and accessibility in mental health tech. It showcases the practical use of instruction-tuned LLMs through carefully crafted prompts that guide tone, empathy, and safety in every response.",
    features: [
      "Conversational AI: Delivers empathetic, human-like responses using OpenAI's GPT-4-turbo, enhanced by structured, instruction-driven prompts",
      "Sentiment Analysis: Detects user emotions and adapts responses accordingly to match the emotional tone",
      "Anonymous Interactions: No account required, prioritizes user privacy and confidentiality",
      "Context Retention: Maintains conversation history to provide meaningful, relevant replies per chat session using session-based memory",
      "User-Friendly Interface: Clean, intuitive UI for a seamless chatting experience",
    ],
    reasons: [
      "Mental Health Accessibility: Address the growing need for low-barrier emotional support tools",
      "AI-Powered Empathy: Explore how instruction-tuned LLMs can be guided through prompting to respond with emotional sensitivity and care",
      "Sentiment-Aware Responses: Practice emotion detection and context-based conversational flow",
      "Privacy First: Ensure users feel safe by enabling anonymous, no-login sessions",
      "Real-World Impact: Build a project that provides comfort to users dealing with stress, anxiety, or isolation",
     "Skill Expansion: Apply best practices in prompting, memory management, and ethical AI use with OpenAI’s GPT models and sentiment analysis tools",
    ],
    techStack: ["TypeScript", "Next.js", "TailwindCSS", "OpenAI API"],
    link: "https://github.com/dinakajoy/TheraBot",
    liveLink: "https://thera-bot-gilt.vercel.app",
  },
  {
    title: "Team Collab GraphQL API",
    description:
      "A production-ready GraphQL API built for team collaboration and task management, designed with scalability, performance, and security in mind. TeamCollab demonstrates modern backend engineering best practices using GraphQL, role-based access control, observability, and data optimization techniques.",
    features: [
      "Authentication & Authorization: Secure login and role-based access via GraphQL Shield",
      "Project Management: Create, update, assign, and monitor project progress within teams",
      "Task Management: Manage task lifecycles, assignees, deadlines, and status updates",
      "Team Structures: Organize users into teams with scalable relationships and responsibilities",
      "Data Batching: Improve performance by batching and caching database queries using DataLoader",
      "Performance Monitoring: Integrated Prometheus metrics to track API health and performance",
      "Structured Error Handling: Consistent error formats for robust client-side integration",
    ],
    reasons: [
      "Master GraphQL: Build a full-featured API with Apollo Server, GraphQL Shield, and middleware layers",
      "Optimize Data Access: Learn to reduce N+1 query issues through DataLoader batching",
      "Scalable Architecture: Practice clean code organization and modular design for real-world apps",
      "Enhance Observability: Integrate monitoring tools like Prometheus for tracking uptime and metrics",
      "Enforce Security Best Practices: Implement strict access controls and environment management",
      "Professional API Delivery: Strengthen CI/CD readiness, TypeScript typing, and development workflows",
    ],
    techStack: [
      "TypeScript",
      "Node.js",
      "Express.js",
      "MongoDB",
      "Apollo Server",
      "GraphQL",
      "Prometheus",
    ],
    link: "https://github.com/dinakajoy/teamcollab-graphQL-API",
  },
  {
    title: "Team Work REST API",
    description:
      "TeamWork is a full-featured RESTful API for an internal social network designed to foster collaboration, communication, and community within an organization. It supports article posting, GIF sharing, content moderation, role-based access control, and admin functionalities - built with a focus on modular design, testability, and deployment readiness.",
    features: [
      "User Authentication: Secure account creation, login, and profile management",
      "Admin Authorization: Manage users, categories, and moderate flagged content with elevated access",
      "Content Management: Create, edit, delete, and comment on articles and GIFs",
      "Moderation Tools: Flag inappropriate content for review and admin action",
      "Category Management: Organize articles by topic for structured browsing",
      "Media Handling: Upload and manage images/GIFs via Cloudinary integration",
      "RBAC (Role-Based Access Control): Assign and enforce permissions for users and admins",
      "Swagger Documentation: Clear, auto-generated API docs for easy integration and collaboration",
      "Unit & Integration Testing: Tested thoroughly using Mocha, Chai, and coverage tracked with Coveralls",
      "CI/CD Pipeline: Automated testing and deployment via Travis CI",
    ],
    reasons: [
      "RESTful Design Mastery: Architect a well-structured, scalable, and modular API",
      "Authentication & RBAC: Deepen experience in secure access control and role-based logic",
      "Testing Culture: Practice TDD and integration testing for robust endpoint reliability",
      "DevOps Exposure: Set up CI/CD pipelines for continuous integration and clean deployments",
      "API Documentation: Deliver a professional API experience with Swagger UI",
      "Cloud Media Integration: Manage user-uploaded media with a third-party storage service",
      "Code Quality Discipline: Maintain clean, maintainable, production-ready codebases",
    ],
    techStack: ["Node.js", "Express.js", "PostgreSQL", "Swagger API"],
    link: "https://github.com/dinakajoy/teamwork-REST-API",
  },
  {
    title: "JSON Engine",
    description:
      "A powerful utility for parsing, transforming, searching, and exporting JSON data. Built for developers working with large datasets or APIs, it supports streaming, background processing, and full-text queries - all while maintaining responsive UI and high performance.",
    features: [
      "JSON Parsing: Read and interpret JSON files into JavaScript objects seamlessly",
      "CSV Conversion: Transform JSON into CSV for analysis, reporting, or spreadsheet usage",
      "Full-Text Search: Search across keys and values using advanced filtering operators",
      "Efficient Streaming: Handle large files with minimal memory footprint using streams",
      "Query Engine: Support operations like =, contains, startsWith, and endsWith",
      "Worker Thread Processing: Use multi-threading to offload expensive tasks",
    ],
    reasons: [
      "Structured Data Handling: Practice transforming JSON data and exporting it to usable formats",
      "Performance Optimization: Learn how to process large files without blocking the event loop",
      "Concurrency Experience: Gain practical experience using Worker threads for computation-heavy tasks",
      "Search & Filter Logic: Build an engine capable of querying and filtering large JSON datasets",
      "Tooling Focus: Create utilities that enhance developer workflows and data accessibility",
      "Foundational Backend Skills: Reinforce core backend concepts relevant in data-heavy API development",
      "User Experience Consideration: Deliver responsive performance with background data operations",
    ],
    techStack: [
      "Node.js",
      "JSONStream",
      "Worker Threads",
      "CSV Parser",
      "In-Memory Search Engine",
    ],
    link: "https://github.com/dinakajoy/JSON_Engine",
  },
  {
    title: "Real-time Chat App",
    description:
      "A real-time chat application that allows users to authenticate, add friends, and exchange messages with attachments. Built to deepen Firebase expertise while delivering a smooth, responsive messaging experience.",
    features: [
      "User Authentication: Login, signup, forgot password, and reset password functionality",
      "Real-Time Messaging: Send and receive messages instantly with support for file and image attachments",
      "Friends Management: Add and manage friends to create a personalized chat network",
      "Responsive Design: Fully responsive UI built with SCSS and TailwindCSS for seamless experience across devices",
    ],
    reasons: [
      "Firebase Mastery: Practice integrating Firebase Authentication, Firestore, and Cloud Storage for a full-stack real-time app",
      "Real-Time Communication: Learn to implement WebSocket-like behavior using Firestore listeners",
      "Authentication Flow: Understand and implement secure user flows including signup, login, password reset, and email verification",
      "File Upload & Management: Build a system to handle file uploads, previews, and retrieval using Firebase Storage",
      "Accessibility & UX: Build for accessibility and design a user-friendly, responsive interface",
      "Deployment Workflow: Gain hands-on experience deploying a React + Firebase app using Vercel",
      "Security Best Practices: Apply and test Firebase Rules to protect user data and enforce role-based access",
    ],
    techStack: ["React.js", "TypeScript", "SCSS", "TailwindCSS", "Firebase"],
    link: "https://github.com/dinakajoy/real_time_chat_app",
    liveLink: "https://real-time-chat-app-by-joy.vercel.app",
  },
  {
    title: "SmartTicTac: AI-Enhanced Tic-Tac-Toe",
    description:
      "A web-based Tic-Tac-Toe game enhanced with AI to offer an engaging and challenging experience across multiple difficulty levels.",
    features: [
      "AI Opponent: Built-in AI that adjusts difficulty based on level chosen by user",
      "User Interface: Simple and intuitive Tic-Tac-Toe grid with clickable cells",
      "Game Modes: Play against the computer or a second player",
      "Real-Time Feedback: Immediate results after each move with win/loss notification",
      "Difficulty Levels: Three AI difficulty levels (easy, medium, hard)",
      "Time Travel: Navigate through the move history and jump back to any previous state",
      "Responsive Design: Fully optimized for both desktop and mobile devices",
      "Reset Functionality: Option to reset the game and start fresh",
    ],
    reasons: [
      "AI Implementation: Practice building AI decision-making with Minimax strategies",
      "Game Logic: Manage turn-based gameplay, win/loss conditions, and draw detection",
      "State Management: Handle dynamic game states, including historical states for time travel using React hooks",
      "User Interaction: Build a smooth, interactive interface that supports real-time move history navigation",
      "Difficulty Adjustment: Implement dynamic difficulty scaling to enhance user engagement",
      "Responsive Design: Ensure a consistent and enjoyable experience across all devices",
      "Performance Optimization: Maintain fast and efficient rendering when jumping across moves",
    ],
    techStack: ["Next.js", "TypeScript", "TailwindCSS", "Minimax Algorithm"],
    link: "https://github.com/dinakajoy/SmartTicTac",
    liveLink: "https://smart-tic-tac.vercel.app",
  },
  {
    title: "Kepler Planet Explorer",
    description:
      "A web application that visualizes exoplanet data from the Kepler space mission, helping users explore discovered planets in an interactive and informative way.",
    features: [
      "CSV Data Parsing: Load and process NASA's Exoplanet API data from a static CSV file",
      "Planet Catalogue: Display a searchable and sortable list of discovered exoplanets",
      "Planet Details: View detailed information about each planet including size, orbital period, and distance",
      "Data Visualization: Interactive charts and graphs showing key planetary statistics",
      "Filtering and Sorting: Filter planets by size, orbital period, and habitability zone",
      "Responsive Design: Optimized layout for various screen sizes including mobile devices",
      "Error Handling: Gracefully manage data loading errors and parsing issues",
    ],
    reasons: [
      "CSV File Handling: Learn how to load, parse, and process structured CSV data efficiently",
      "Data Visualization: Represent complex scientific data through dynamic charts and graphs",
      "Search and Filter Functionality: Build efficient and user-friendly ways to explore large datasets",
      "State Management: Manage parsed data, applied filters, and selected planet views effectively",
      "UI/UX Design: Create an engaging and educational interface for scientific exploration",
      "Performance Optimization: Improve performance for handling, rendering, and interacting with large datasets",
    ],
    techStack: [
      "Next.js",
      "TypeScript",
      "TailwindCSS",
      "CSV-Parse",
      "NASA Exoplanet API",
    ],
    link: "https://github.com/dinakajoy/Kepler-planet-explorer",
    liveLink: "https://kepler-planet-explorer.vercel.app",
  },
  {
    title: "GitHub Snoop",
    description:
      "A web application that provides insights into GitHub profiles, repositories, and contributions, allowing users to explore developer activity with or without authentication.",
    features: [
      "Guest Access: Explore profiles without authentication (search history not preserved)",
      "GitHub Authentication: Secure login via GitHub OAuth for personalized experience",
      "Profile Search: Find GitHub users by username",
      "User Insights: Display user bio, location, followers, following, and public repository stats",
      "Repository Listing: List a user’s repositories with stars, forks, and descriptions",
      "Sorting and Filtering: Sort repositories by stars, forks, or creation date",
      "Error Handling: Manage invalid usernames, API rate limits, and loading states",
      "Responsive Design: Optimized for both desktop and mobile viewing",
      "Performance: Implements pagination, lazy loading, and efficient API usage",
    ],
    reasons: [
      "API Integration: Learn to fetch and process real-world data from the GitHub REST API",
      "OAuth Authentication: Practice implementing GitHub OAuth securely for user login",
      "Search Experience: Build fast and user-friendly search for developer profiles",
      "Data Visualization: Present user and repo data in an organized and insightful way",
      "State Management: Handle auth state, search results, and UI updates effectively",
      "Error Resilience: Build a robust app that handles rate limits and invalid input gracefully",
      "UI/UX Focus: Design clean, responsive layouts that simplify data exploration",
      "Performance Optimization: Implement best practices for loading and data management",
    ],
    techStack: ["Next.js", "TypeScript", "TailwindCSS", "GitHub API", "OAuth"],
    link: "https://github.com/dinakajoy/github-snoop",
    liveLink: "https://github-snoop.vercel.app",
  },
  {
    title: "Quiz App",
    description:
      "A web-based quiz application that allows users to test their knowledge across various topics with efficient scoring and performance feedback.",
    features: [
      "Dynamic Questions: Questions are fetched from a MongoDB database",
      "Scoring: Score updates at the endor after timeout",
      "Timer Functionality: Countdown timer per quiz session to create time-based challenges",
      "Result Summary: Final score and breakdown of correct vs incorrect answers",
      "Responsive Design: Optimized for desktop, tablet, and mobile devices",
      "Error Handling: Gracefully handles loading issues and API errors",
    ],
    reasons: [
      "Data Management: Practice managing complex quiz states like current question, selected answer, and score updates",
      "User Interaction: Create a smooth and engaging quiz flow with interactive elements",
      "Data Handling: Efficiently structure and fetch quiz data from MongoDB",
      "UI/UX Skills: Focus on clear, minimalistic interface design and responsive layout",
      "Performance Feedback: Deliver immediate insights to improve user learning experience",
    ],
    techStack: ["Next.js", "TypeScript", "CSS", "SWR", "GraphQL API"],
    link: "https://github.com/dinakajoy/quiz_app_graphql_api",
    liveLink: "https://quiz-app-graphql-api.vercel.app",
  },
  {
    title: "Mini Netflix Movie App",
    description:
      "A movie catalogue web application that allows users to browse, search, save and remove favourite movies, and discover titles through a Netflix-like interface.",
    features: [
      "User Authentication: Secure login and registration process",
      "Movie Catalogue: Paginated list of movies with lazy loading for performance",
      "Movie Details: Detailed view with description, rating, and release date",
      "Favorites: Save and remove movies from personal favorites list",
      "Search and Sort: Easily find and organize movies by title",
      "Responsive Design: Fully optimized for desktop and mobile devices",
      "Error Handling: Handles API errors and loading states gracefully",
    ],
    reasons: [
      "Authentication: Recreated Netflix-style login to showcase secure authentication flow",
      "Clean UX/UI Skills: Mimicked Netflix's sleek UI to demonstrate responsive and modern design capabilities",
      "API Consumption: Mimicked integrating with external APIs",
      "User Personalization: Built features like favorites to manage user-specific data effectively",
      "Scalability Practice: Applied pagination, lazy loading, and sorting to enhance performance and usability",
    ],
    techStack: ["CSS", "TypeScript", "React"],
    link: "https://github.com/dinakajoy/mini-netflix-movie-app",
    liveLink: "https://mini-netflix-movie-app.vercel.app",
  },
  {
    title: "Save the Princess Game",
    description:
      "A fun and interactive game where players navigate through challenges to rescue a princess. Built to demonstrate core game development concepts and user interactivity.",
    features: [
      "Hero Character: A playable hero that can move around the screen using keyboard inputs",
      "Princess Character: A non-playable character that the hero must reach to win",
      "Obstacles: Static or moving obstacles that challenge the player’s movement",
      "User Interaction: Uses keyboard events for controlling the hero’s movement",
      "Win Screen: Displays a win screen once the hero reaches the princess",
      "Game Restart: Automatically restarts the game after a win",
    ],
    reasons: [
      "Core Game Development Skills: Practice implementing game loops, collision detection, levels, and state management",
      "Interactive & Engaging: Build something fun and visually engaging for users and recruiters alike",
      "Problem-Solving Practice: Improved logic-building by designing environment, obstacles, and win conditions",
      "Event Handling: Handle real-time user input through keyboard events and render updates",
      "Portfolio Creativity: Add a visually unique and playful project that stands out",
    ],
    techStack: ["React", "CSS"],
    link: "https://github.com/dinakajoy/save-the-princess-game",
    liveLink: "https://save-the-princess.netlify.app",
  },
  {
    title: "Mini Marvel",
    description:
      "A web application that allows users to explore Marvel characters, comics, and stories using the Marvel API, with a special focus on Captain Marvel.",
    features: [
      "Home Screen: Replicates Captain Marvel’s homepage with a 'Captain Marvel Comics' section",
      "Comics Screen: Lists all Captain Marvel comic issues with sorting options",
      "Comics Issues Screen: Displays all comics in which Captain Marvel appears",
      "Sorting: Allows sorting comics and issues by edition release date (ascending/descending)",
      "Infinite Scroll: Seamlessly loads more content as the user scrolls down",
      "Lazy Load: Optimized image loading for performance",
      "Detail Screen: Shows detailed info about selected comics or issues",
    ],
    reasons: [
      "API Integration Skills: Practice working with third-party APIs and handling dynamic external data",
      "Search, Filtering, and Pagination Practice: Learn how to implement real-world UI functionality for data-heavy applications",
      "Fun Portfolio Project: Adds a creative, fan-centric twist to the portfolio that demonstrates both frontend and API consumption skills",
      "Performance Optimization: Practice lazy loading and infinite scroll techniques to enhance UX",
      "Dynamic Routing: Implement detailed navigation based on user interactions and selected items",
    ],
    techStack: ["React", "CSS", "Marvel API"],
    link: "https://github.com/dinakajoy/mini-marvel",
    liveLink: "https://mini-marvel.netlify.app",
  },
];
